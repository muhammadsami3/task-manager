openapi: 3.0.0
info:
  title: Task Manager
  contact: {}
  version: '1.0'
servers:
- url: http://localhost:3000
  variables: {}
paths:
  /users:
    post:
      tags:
      - Users
      summary: CreateUser
      description: CreateUser
      operationId: CreateUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: muhammad1
              email: sam1@gmail.com
              password: SAmi@1022591400
        required: true
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
  /tasks:
    post:
      tags:
      - Tasks
      summary: CreateTask
      description: CreateTask
      operationId: CreateTask
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
            example:
              description: postman 2
        required: true
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
    get:
      tags:
      - Tasks
      summary: ReadTasks
      description: ReadTasks
      operationId: ReadTasks
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
  /tasks/{taskId}:
    patch:
      tags:
      - Tasks
      summary: UpdateTask
      description: UpdateTask
      operationId: UpdateTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
      requestBody:
        description: 'success'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
            example:
              completed: 'true'
        required: true
      responses:
        '200':
          description: 'sucess'
        '400':
          description: 'Invalid update'
        '403':
          description: 'unauthorized'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal Server Error'
      deprecated: false
    get:
      tags:
      - Tasks
      summary: ReadTask
      description: Read Task
      operationId: ReadTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'sucess'
        '403':
          description: 'unauthorized'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal Server Error'
      deprecated: false
    delete:
      tags:
      - Tasks
      summary: DeleteTask
      description: Delete Task
      operationId: DeleteTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'sucess'
        '403':
          description: 'unauthorized'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal Server Error'
      deprecated: false
  /users/me:
    delete:
      tags:
      - Users
      summary: DeleteUser
      description: Delete User
      operationId: DeleteUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
    get:
      tags:
      - Users
      summary: UpdateUser
      description: Update User
      operationId: UpdateUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
    patch:
      tags:
      - Users
      summary: PatchUpdateUser
      description: UpdateUser
      operationId: PatchUpdateUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              age: 27
              name: muhammad
              password: SAmi@1022591400
        required: true
      responses:
        '200':
          description: 'sucess'
        '400':
          description: 'Invalid update'
        '403':
          description: 'unauthorized'
        '500':
          description: 'Internal Server Error'
          
      deprecated: false
  /users/login:
    get:
      tags:
      - Users
      summary: login
      description: login
      operationId: login
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
  /users/logout:
    post:
      tags:
      - Users
      summary: logout
      description: logout
      operationId: logout
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
  /users/logoutAll:
    post:
      tags:
      - Users
      summary: logoutAll
      description: logoutAll
      operationId: logoutAll
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logoutAllRequest'
            example:
              email: sam2@gmail.com
              password: '123456789'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
      deprecated: false
components:
  schemas:
    CreateUserRequest:
      title: CreateUserRequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: muhammad1
        email: sam1@gmail.com
        password: SAmi@1022591400
    uploadavatarrequest:
      title: uploadavatarrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: muhammad1
        email: sam1@gmail.com
        password: SAmi@1022591400
    CreateTaskRequest:
      title: CreateTaskRequest
      required:
      - description
      type: object
      properties:
        description:
          type: string
      example:
        description: postman 2
    UpdateTaskRequest:
      title: UpdateTaskRequest
      required:
      - completed
      type: object
      properties:
        completed:
          type: string
      example:
        completed: 'true'
    DeleteTaskRequest:
      title: DeleteTaskRequest
      required:
      - description
      type: object
      properties:
        description:
          type: string
      example:
        description: postman 2
    logoutAllRequest:
      title: logoutAllRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: sam2@gmail.com
        password: '123456789'
    UpdateUserRequest:
      title: UpdateUserRequest
      required:
      - age
      - name
      - password
      type: object
      properties:
        age:
          type: integer
          format: int32
        name:
          type: string
        password:
          type: string
      example:
        age: 27
        name: muhammad
        password: SAmi@1022591400
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
security:
- httpBearer: []
